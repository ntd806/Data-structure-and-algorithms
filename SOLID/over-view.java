// SOLID l√† 5 nguy√™n l√Ω thi·∫øt k·∫ø h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng quan tr·ªçng gi√∫p vi·∫øt m√£ d·ªÖ b·∫£o tr√¨, m·ªü r·ªông v√† d·ªÖ hi·ªÉu h∆°n. ƒê√¢y l√† vi·∫øt t·∫Øt c·ªßa:

// S - Single Responsibility Principle (Nguy√™n l√Ω tr√°ch nhi·ªám duy nh·∫•t)
// O - Open/Closed Principle (Nguy√™n l√Ω m·ªü ƒë√≥ng)
// L - Liskov Substitution Principle (Nguy√™n l√Ω thay th·∫ø Liskov)
// I - Interface Segregation Principle (Nguy√™n l√Ω ph√¢n t√°ch giao di·ªán)
// D - Dependency Inversion Principle (Nguy√™n l√Ω ƒë·∫£o ng∆∞·ª£c s·ª± ph·ª• thu·ªôc)

// 1. Single Responsibility Principle (SRP)
// M·ªôt l·ªõp ch·ªâ n√™n c√≥ m·ªôt l√Ω do ƒë·ªÉ thay ƒë·ªïi ‚Äì t·ª©c l√† n√≥ ch·ªâ n√™n ƒë·∫£m nhi·ªám m·ªôt tr√°ch nhi·ªám duy nh·∫•t.

// V√≠ d·ª•:
// Vi ph·∫°m SRP: Class n√†y v·ª´a l∆∞u d·ªØ li·ªáu v·ª´a hi·ªÉn th·ªã d·ªØ li·ªáu
class Employee {
    public void saveToDatabase() {
        // L∆∞u nh√¢n vi√™n v√†o database
    }

    public void generateReport() {
        // T·∫°o b√°o c√°o cho nh√¢n vi√™n
    }
}

// Tu√¢n th·ªß SRP:
class Employee {
    private String name;
    private String position;
    
    // Constructor v√† c√°c getter/setter
}

class EmployeeRepository {
    public void save(Employee employee) {
        // L∆∞u d·ªØ li·ªáu v√†o database
    }
}

class ReportGenerator {
    public void generate(Employee employee) {
        // T·∫°o b√°o c√°o
    }
}

// 2. Open/Closed Principle (OCP)
// M·ªôt l·ªõp n√™n ƒë∆∞·ª£c m·ªü r·ªông nh∆∞ng kh√¥ng ƒë∆∞·ª£c s·ª≠a ƒë·ªïi. Nghƒ©a l√† b·∫°n n√™n m·ªü r·ªông h√†nh vi c·ªßa class thay v√¨ s·ª≠a ƒë·ªïi m√£ ngu·ªìn ban ƒë·∫ßu.

// V√≠ d·ª•:
// Vi ph·∫°m OCP
class AreaCalculator {
    public double calculateArea(Object shape) {
        if (shape instanceof Circle) {
            Circle circle = (Circle) shape;
            return Math.PI * circle.radius * circle.radius;
        } else if (shape instanceof Rectangle) {
            Rectangle rectangle = (Rectangle) shape;
            return rectangle.length * rectangle.width;
        }
        return 0;
    }
}

// Tu√¢n th·ªß OCP
interface Shape {
    double calculateArea();
}

class Circle implements Shape {
    double radius;

    public Circle(double radius) {
        this.radius = radius;
    }

    public double calculateArea() {
        return Math.PI * radius * radius;
    }
}

class Rectangle implements Shape {
    double length, width;

    public Rectangle(double length, double width) {
        this.length = length;
        this.width = width;
    }

    public double calculateArea() {
        return length * width;
    }
}

class AreaCalculator {
    public double calculateArea(Shape shape) {
        return shape.calculateArea();
    }
}

// 3. Liskov Substitution Principle (LSP)
// L·ªõp con n√™n c√≥ th·ªÉ thay th·∫ø l·ªõp cha m√† kh√¥ng l√†m thay ƒë·ªïi t√≠nh ƒë√∫ng ƒë·∫Øn c·ªßa ch∆∞∆°ng tr√¨nh.

// V√≠ d·ª•:
// Vi ph·∫°m LSP
class Bird {
    public void fly() {
        System.out.println("Bird is flying");
    }
}

class Ostrich extends Bird {
    @Override
    public void fly() {
        throw new UnsupportedOperationException("Ostrich can't fly");
    }
}

// Tu√¢n th·ªß LSP
abstract class Bird {
    public abstract void move();
}

class Sparrow extends Bird {
    @Override
    public void move() {
        System.out.println("Sparrow flies");
    }
}

class Ostrich extends Bird {
    @Override
    public void move() {
        System.out.println("Ostrich walks");
    }
}

// 4. Interface Segregation Principle (ISP)
// Kh√¥ng n√™n √©p bu·ªôc c√°c l·ªõp ph·∫£i implement c√°c ph∆∞∆°ng th·ª©c m√† ch√∫ng kh√¥ng s·ª≠ d·ª•ng.

// V√≠ d·ª•:
// Vi ph·∫°m ISP
interface Worker {
    void work();
    void eat();
}

class Robot implements Worker {
    public void work() {
        System.out.println("Robot is working");
    }

    public void eat() {
        // Robot kh√¥ng c·∫ßn ƒÉn
    }
}

// Tu√¢n th·ªß ISP
interface Workable {
    void work();
}

interface Eatable {
    void eat();
}

class Human implements Workable, Eatable {
    public void work() {
        System.out.println("Human is working");
    }

    public void eat() {
        System.out.println("Human is eating");
    }
}

class Robot implements Workable {
    public void work() {
        System.out.println("Robot is working");
    }
}

// 5. Dependency Inversion Principle (DIP)
// C√°c m√¥-ƒëun c·∫•p cao kh√¥ng n√™n ph·ª• thu·ªôc v√†o c√°c m√¥-ƒëun c·∫•p th·∫•p. C·∫£ hai n√™n ph·ª• thu·ªôc v√†o abstraction (giao di·ªán).

// V√≠ d·ª•:
// Vi ph·∫°m DIP
class LightBulb {
    public void turnOn() {
        System.out.println("Bulb turned on");
    }

    public void turnOff() {
        System.out.println("Bulb turned off");
    }
}

class Switch {
    private LightBulb bulb;

    public Switch(LightBulb bulb) {
        this.bulb = bulb;
    }

    public void operate() {
        bulb.turnOn();
    }
}

// Tu√¢n th·ªß DIP
interface Switchable {
    void turnOn();
    void turnOff();
}

class LightBulb implements Switchable {
    public void turnOn() {
        System.out.println("Bulb turned on");
    }

    public void turnOff() {
        System.out.println("Bulb turned off");
    }
}

class Switch {
    private Switchable device;

    public Switch(Switchable device) {
        this.device = device;
    }

    public void operate() {
        device.turnOn();
    }
}
// üîë T√≥m t·∫Øt ng·∫Øn g·ªçn:
// S: M·ªói class ch·ªâ l√†m m·ªôt nhi·ªám v·ª• duy nh·∫•t.
// O: D·ªÖ d√†ng m·ªü r·ªông ch·ª©c nƒÉng m√† kh√¥ng s·ª≠a ƒë·ªïi m√£ g·ªëc.
// L: L·ªõp con thay th·∫ø l·ªõp cha kh√¥ng g√¢y l·ªói.
// I: T√°ch nh·ªè giao di·ªán, kh√¥ng √©p bu·ªôc implement ph∆∞∆°ng th·ª©c kh√¥ng c·∫ßn thi·∫øt.
// D: Ph·ª• thu·ªôc v√†o abstraction, kh√¥ng ph·ª• thu·ªôc v√†o chi ti·∫øt.
