// K·ªπ thu·∫≠t Top K Elements ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t√¨m K ph·∫ßn t·ª≠ l·ªõn nh·∫•t ho·∫∑c nh·ªè nh·∫•t trong m·ªôt t·∫≠p d·ªØ li·ªáu l·ªõn m√† kh√¥ng c·∫ßn ph·∫£i s·∫Øp x·∫øp to√†n b·ªô d√£y.
// √ù t∆∞·ªüng ch√≠nh:
// S·ª≠ d·ª•ng c·∫•u tr√∫c d·ªØ li·ªáu Heap:
// Min-Heap: ƒê·ªÉ t√¨m K ph·∫ßn t·ª≠ l·ªõn nh·∫•t (gi·ªØ ph·∫ßn t·ª≠ nh·ªè nh·∫•t tr√™n ƒë·ªânh).
// Max-Heap: ƒê·ªÉ t√¨m K ph·∫ßn t·ª≠ nh·ªè nh·∫•t (gi·ªØ ph·∫ßn t·ª≠ l·ªõn nh·∫•t tr√™n ƒë·ªânh).
// ƒê·ªô ph·ª©c t·∫°p:
// Th·ªùi gian: (NlogK) ‚Äî v·ªõi N l√† s·ªë ph·∫ßn t·ª≠ trong m·∫£ng.
// Kh√¥ng gian: O(K) ‚Äî l∆∞u tr·ªØ heap v·ªõi K ph·∫ßn t·ª≠.
// üìå V√≠ d·ª• 1: T√¨m K ph·∫ßn t·ª≠ l·ªõn nh·∫•t b·∫±ng Min-Heap
// B√†i to√°n: T√¨m 3 ph·∫ßn t·ª≠ l·ªõn nh·∫•t trong m·∫£ng [4, 1, 7, 3, 8, 5, 9].

// √ù t∆∞·ªüng:
// Duy tr√¨ m·ªôt Min-Heap k√≠ch th∆∞·ªõc K.
// N·∫øu ph·∫ßn t·ª≠ hi·ªán t·∫°i l·ªõn h∆°n ph·∫ßn t·ª≠ nh·ªè nh·∫•t tr√™n heap, thay th·∫ø n√≥.
// K·∫øt qu·∫£ cu·ªëi c√πng l√† c√°c ph·∫ßn t·ª≠ trong heap.
// Code (Java):
import java.util.PriorityQueue;

public class TopKElements {
    public static int[] findTopKElements(int[] nums, int k) {
        // T·∫°o Min-Heap
        PriorityQueue<Integer> minHeap = new PriorityQueue<>(k);

        for (int num : nums) {
            if (minHeap.size() < k) {
                minHeap.offer(num);
            } else if (num > minHeap.peek()) {
                minHeap.poll();  // X√≥a ph·∫ßn t·ª≠ nh·ªè nh·∫•t
                minHeap.offer(num);  // Th√™m ph·∫ßn t·ª≠ l·ªõn h∆°n
            }
        }

        // Chuy·ªÉn k·∫øt qu·∫£ sang m·∫£ng
        int[] result = new int[k];
        int i = 0;
        while (!minHeap.isEmpty()) {
            result[i++] = minHeap.poll();
        }
        return result;
    }

    public static void main(String[] args) {
        int[] nums = {4, 1, 7, 3, 8, 5, 9};
        int k = 3;
        int[] topK = findTopKElements(nums, k);
        System.out.print("Top " + k + " ph·∫ßn t·ª≠ l·ªõn nh·∫•t l√†: ");
        for (int num : topK) {
            System.out.print(num + " ");
        }
    }
}
// Gi·∫£i th√≠ch:
// minHeap.peek(): Tr·∫£ v·ªÅ ph·∫ßn t·ª≠ nh·ªè nh·∫•t trong heap.
// N·∫øu ph·∫ßn t·ª≠ m·ªõi l·ªõn h∆°n ph·∫ßn t·ª≠ nh·ªè nh·∫•t, ta thay th·∫ø n√≥.
// K·∫øt qu·∫£ l√† c√°c ph·∫ßn t·ª≠ l·ªõn nh·∫•t n·∫±m trong heap.
// üìå V√≠ d·ª• 2: T√¨m K ph·∫ßn t·ª≠ nh·ªè nh·∫•t b·∫±ng Max-Heap
// B√†i to√°n: T√¨m 3 ph·∫ßn t·ª≠ nh·ªè nh·∫•t trong m·∫£ng [4, 1, 7, 3, 8, 5, 9].

// √ù t∆∞·ªüng:
// Duy tr√¨ m·ªôt Max-Heap k√≠ch th∆∞·ªõc K.
// N·∫øu ph·∫ßn t·ª≠ hi·ªán t·∫°i nh·ªè h∆°n ph·∫ßn t·ª≠ l·ªõn nh·∫•t tr√™n heap, thay th·∫ø n√≥.
// Code (Java):

import java.util.Collections;
import java.util.PriorityQueue;

public class TopKSmallestElements {
    public static int[] findTopKSmallest(int[] nums, int k) {
        // T·∫°o Max-Heap
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(k, Collections.reverseOrder());

        for (int num : nums) {
            if (maxHeap.size() < k) {
                maxHeap.offer(num);
            } else if (num < maxHeap.peek()) {
                maxHeap.poll();  // X√≥a ph·∫ßn t·ª≠ l·ªõn nh·∫•t
                maxHeap.offer(num);  // Th√™m ph·∫ßn t·ª≠ nh·ªè h∆°n
            }
        }

        // Chuy·ªÉn k·∫øt qu·∫£ sang m·∫£ng
        int[] result = new int[k];
        int i = 0;
        while (!maxHeap.isEmpty()) {
            result[i++] = maxHeap.poll();
        }
        return result;
    }

    public static void main(String[] args) {
        int[] nums = {4, 1, 7, 3, 8, 5, 9};
        int k = 3;
        int[] topK = findTopKSmallest(nums, k);
        System.out.print("Top " + k + " ph·∫ßn t·ª≠ nh·ªè nh·∫•t l√†: ");
        for (int num : topK) {
            System.out.print(num + " ");
        }
    }
}
// Gi·∫£i th√≠ch:
// maxHeap.peek(): Tr·∫£ v·ªÅ ph·∫ßn t·ª≠ l·ªõn nh·∫•t trong heap.
// Thay th·∫ø ph·∫ßn t·ª≠ l·ªõn nh·∫•t n·∫øu ph·∫ßn t·ª≠ m·ªõi nh·ªè h∆°n.
// üìà So s√°nh v·ªõi c√°ch s·∫Øp x·∫øp th√¥ng th∆∞·ªùng:
// S·∫Øp x·∫øp to√†n b·ªô m·∫£ng c√≥ ƒë·ªô ph·ª©c t·∫°p O(NlogN).
// S·ª≠ d·ª•ng Heap gi√∫p gi·∫£m ƒë·ªô ph·ª©c t·∫°p xu·ªëng c√≤n O(NlogK), t·ªët h∆°n khi K‚â™N.
// üöÄ ·ª®ng d·ª•ng c·ªßa Top K Elements:
// G·ª£i √Ω s·∫£n ph·∫©m trong th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ (Top K s·∫£n ph·∫©m ph·ªï bi·∫øn nh·∫•t).
// G·ª£i √Ω t·ª´ kh√≥a t√¨m ki·∫øm ph·ªï bi·∫øn nh·∫•t.
// T√¨m c√°c b√†i vi·∫øt ƒë∆∞·ª£c t∆∞∆°ng t√°c nhi·ªÅu nh·∫•t tr√™n m·∫°ng x√£ h·ªôi.
