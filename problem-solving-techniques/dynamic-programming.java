// Dynamic Programming (DP) l√† m·ªôt ph∆∞∆°ng ph√°p gi·∫£i quy·∫øt b√†i to√°n b·∫±ng c√°ch chia nh·ªè b√†i to√°n l·ªõn th√†nh c√°c b√†i to√°n con nh·ªè h∆°n v√† 
// l∆∞u tr·ªØ k·∫øt qu·∫£ trung gian (ƒë·ªÉ kh√¥ng ph·∫£i t√≠nh l·∫°i nhi·ªÅu l·∫ßn) nh·∫±m t·ªëi ∆∞u h√≥a th·ªùi gian ch·∫°y. DP th∆∞·ªùng ƒë∆∞·ª£c √°p d·ª•ng cho c√°c b√†i to√°n c√≥ t√≠nh ch·∫•t con tr√πng
// l·∫∑p (overlapping subproblems) v√† c·∫•u tr√∫c t·ªëi ∆∞u con (optimal substructure).

// ‚öôÔ∏è C√°c b∆∞·ªõc c∆° b·∫£n khi gi·∫£i b√†i to√°n b·∫±ng DP:
// X√°c ƒë·ªãnh b√†i to√°n con (Subproblems):

// Ph√¢n chia b√†i to√°n l·ªõn th√†nh c√°c b√†i to√°n con nh·ªè h∆°n m√† k·∫øt qu·∫£ c·ªßa ch√∫ng c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x√¢y d·ª±ng l·ªùi gi·∫£i t·ªïng th·ªÉ.
// X√°c ƒë·ªãnh m·ªëi quan h·ªá chuy·ªÉn tr·∫°ng th√°i (Recurrence Relation):

// X√°c ƒë·ªãnh c√¥ng th·ª©c chuy·ªÉn tr·∫°ng th√°i li√™n k·∫øt k·∫øt qu·∫£ c·ªßa b√†i to√°n con v·ªõi l·ªùi gi·∫£i c·ªßa b√†i to√°n l·ªõn.
// L∆∞u tr·ªØ k·∫øt qu·∫£ trung gian:

// Memoization (Top-Down): Ghi nh·ªõ k·∫øt qu·∫£ c·ªßa c√°c b√†i to√°n con khi t√≠nh ƒë·ªá quy, tr√°nh t√≠nh l·∫°i.
// Tabulation (Bottom-Up): X√¢y d·ª±ng l·ªùi gi·∫£i t·ª´ c√°c b√†i to√°n con nh·ªè nh·∫•t l√™n ƒë·∫øn b√†i to√°n l·ªõn nh·∫•t theo d·∫°ng b·∫£ng.
// T√°i c·∫•u tr√∫c l·ªùi gi·∫£i:

// T·ª´ k·∫øt qu·∫£ c·ªßa c√°c b√†i to√°n con, x√¢y d·ª±ng l·ªùi gi·∫£i c·ªßa b√†i to√°n ban ƒë·∫ßu.
// üìå ·ª®ng d·ª•ng ph·ªï bi·∫øn:
// ƒê∆∞·ªùng ƒëi t·ªëi ∆∞u: T√¨m ƒë∆∞·ªùng ƒëi ng·∫Øn nh·∫•t trong ƒë·ªì th·ªã (v√≠ d·ª•: thu·∫≠t to√°n Dijkstra, Bellman-Ford).
// X√¢u con chung d√†i nh·∫•t (Longest Common Subsequence - LCS): T√¨m chu·ªói con chung d√†i nh·∫•t c·ªßa hai chu·ªói.
// Chu·ªói con li√™n ti·∫øp l·ªõn nh·∫•t: T√¨m chu·ªói con li√™n ti·∫øp c√≥ t·ªïng l·ªõn nh·∫•t trong m·∫£ng s·ªë.
// Nhi·ªÅu b√†i to√°n t·ªï h·ª£p v√† t·ªëi ∆∞u h√≥a kh√°c.
// üìå V√≠ d·ª•: T√¨m x√¢u con chung d√†i nh·∫•t (LCS) b·∫±ng ph∆∞∆°ng ph√°p Tabulation trong Java
// B√†i to√°n:
// Cho hai chu·ªói text1 v√† text2, t√¨m ƒë·ªô d√†i c·ªßa x√¢u con chung d√†i nh·∫•t c·ªßa ch√∫ng.

// Gi·∫£i ph√°p b·∫±ng DP (Bottom-Up Tabulation):
import java.util.Arrays;
public class LCS {
    public static int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();
        int[][] dp = new int[m + 1][n + 1];

        // dp[i][j] l∆∞u tr·ªØ ƒë·ªô d√†i LCS c·ªßa text1[0...i-1] v√† text2[0...j-1]
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[m][n];
    }

    public static void main(String[] args) {
        String text1 = "ABCBDAB";
        String text2 = "BDCABA";
        System.out.println("ƒê·ªô d√†i x√¢u con chung d√†i nh·∫•t: " + longestCommonSubsequence(text1, text2));
    }
}
// Gi·∫£i th√≠ch:
// B·∫£ng dp:
// dp[i][j] l∆∞u tr·ªØ ƒë·ªô d√†i LCS c·ªßa chu·ªói con text1[0...i-1] v√† text2[0...j-1].
// Chuy·ªÉn tr·∫°ng th√°i:
// N·∫øu k√Ω t·ª± hi·ªán t·∫°i c·ªßa hai chu·ªói tr√πng nhau, ta c·ªông th√™m 1 v√†o l·ªùi gi·∫£i c·ªßa b√†i to√°n con nh·ªè h∆°n (dp[i-1][j-1]).
// N·∫øu kh√¥ng tr√πng, ta l·∫•y gi√° tr·ªã l·ªõn nh·∫•t gi·ªØa vi·ªác b·ªè qua k√Ω t·ª± hi·ªán t·∫°i c·ªßa text1 ho·∫∑c text2 (t·ª©c l√† max(dp[i-1][j], dp[i][j-1])).
// K·∫øt qu·∫£ cu·ªëi c√πng:
// dp[m][n] ch·ª©a ƒë·ªô d√†i c·ªßa LCS cho to√†n b·ªô hai chu·ªói.
// üéØ ∆Øu ƒëi·ªÉm c·ªßa Dynamic Programming:
// T·ªëi ∆∞u h√≥a: Gi·∫£m ƒë√°ng k·ªÉ s·ªë l·∫ßn t√≠nh l·∫°i c√°c b√†i to√°n con, t·ª´ ƒë√≥ ti·∫øt ki·ªám th·ªùi gian.
// Ph√π h·ª£p v·ªõi c√°c b√†i to√°n t·ªëi ∆∞u: Nh·ªØng b√†i to√°n c√≥ c·∫•u tr√∫c l·∫∑p l·∫°i v√† ph·ª• thu·ªôc l·∫´n nhau th∆∞·ªùng ƒë∆∞·ª£c gi·∫£i quy·∫øt hi·ªáu qu·∫£ b·∫±ng DP.
// Dynamic Programming l√† m·ªôt c√¥ng c·ª• m·∫°nh m·∫Ω trong l·∫≠p tr√¨nh gi·∫£i thu·∫≠t, gi√∫p gi·∫£i quy·∫øt nhi·ªÅu b√†i to√°n t·ªëi ∆∞u m·ªôt c√°ch hi·ªáu qu·∫£. 
// B·∫°n c√≥ th·ªÉ √°p d·ª•ng c√°c ph∆∞∆°ng ph√°p memoization ho·∫∑c tabulation t√πy thu·ªôc v√†o b√†i to√°n c·ª• th·ªÉ.